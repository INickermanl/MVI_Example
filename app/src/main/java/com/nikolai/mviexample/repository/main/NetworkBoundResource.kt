package com.nikolai.mviexample.repository.mainimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MediatorLiveDataimport com.nikolai.mviexample.util.*import com.nikolai.mviexample.util.Constants.Companion.TESTING_NETWORK_DALAYimport kotlinx.coroutines.Dispatchers.IOimport kotlinx.coroutines.Dispatchers.Mainimport kotlinx.coroutines.GlobalScopeimport kotlinx.coroutines.delayimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextabstract class NetworkBoundResource<ResponseObject, ViewStateType> {	protected val result = MediatorLiveData<DataState<ViewStateType>>()	init {		result.value = DataState.loading(true)		GlobalScope.launch(IO) {			delay(TESTING_NETWORK_DALAY)			withContext(Main) {				val apiResponse = createCall()				result.addSource(apiResponse) { response ->					result.removeSource(apiResponse)					handleNetworkCall(response)				}			}		}	}	private fun handleNetworkCall(response: GenericApiResponse<ResponseObject>) {		when (response) {			is ApiSuccessResponse -> {				handleApiSuccessResponse(response)			}			is ApiErrorResponse -> {				println("Debug: network bound error ${response.errorMessage}")				onResultError(response.errorMessage)			}			is ApiEmptyResponse -> {				println("Debug: HTTP 204.Returned NOTHING!")				onResultError("HTTP 204.Returned NOTHING!")			}		}	}	private fun onResultError(message: String) {		result.value = DataState.error(message)	}	fun asLiveData() = result as LiveData<DataState<ViewStateType>>	abstract fun handleApiSuccessResponse(response: ApiSuccessResponse<ResponseObject>)	abstract fun createCall(): LiveData<GenericApiResponse<ResponseObject>>}