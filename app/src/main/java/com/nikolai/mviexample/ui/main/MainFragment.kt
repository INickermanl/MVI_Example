package com.nikolai.mviexample.ui.mainimport android.content.Contextimport android.os.Bundleimport android.view.*import androidx.fragment.app.Fragmentimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProviderimport androidx.recyclerview.widget.LinearLayoutManagerimport com.bumptech.glide.Glideimport com.nikolai.mviexample.Rimport com.nikolai.mviexample.model.BlogPostimport com.nikolai.mviexample.ui.DataStateListenerimport com.nikolai.mviexample.ui.main.state.MainStateEvent.GetBlogPostEventimport com.nikolai.mviexample.ui.main.state.MainStateEvent.GetUserEventimport com.nikolai.mviexample.util.TopSpacingItemDecorationimport kotlinx.android.synthetic.main.fragment_main.*import java.lang.ClassCastExceptionclass MainFragment : Fragment(), BlogListAdapter.Interaction {	lateinit var viewModel: MainViewModel	lateinit var dataStateListener: DataStateListener	lateinit var blogListAdapter: BlogListAdapter	override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {		return inflater.inflate(R.layout.fragment_main, container, false)	}	override fun onViewCreated(view: View, savedInstanceState: Bundle?) {		super.onViewCreated(view, savedInstanceState)		viewModel = activity?.run {			ViewModelProvider(this).get(MainViewModel::class.java)		} ?: throw Exception("Invalid activity")		initRecyclerView()		subscribeObservers()		setHasOptionsMenu(true)	}	private fun initRecyclerView() {		recycler_view.apply {			layoutManager = LinearLayoutManager(activity)			val topSpacingItemDecoration = TopSpacingItemDecoration(30)			addItemDecoration(topSpacingItemDecoration)			blogListAdapter = BlogListAdapter(this@MainFragment)			adapter = blogListAdapter		}	}	private fun subscribeObservers() {		viewModel.dataState.observe(viewLifecycleOwner, Observer { dataState ->			println("Debug : DataState $dataState")			dataStateListener.onDataStateChanged(dataState)			dataState.data?.let { event ->				event.getContentIfNotHandled()?.let { mainViewState ->					mainViewState.user?.let { user ->						println("Debug : DataState $user")						viewModel.setUser(user)					}					mainViewState.blogPost?.let { listBlogPost ->						println("Debug : DataState $listBlogPost")						viewModel.setBlogListData(listBlogPost)					}				}			}		})		viewModel.viewState.observe(viewLifecycleOwner, Observer { viewState ->			println("Debug: viewState $viewState")			viewState.blogPost?.let { listBlogPost ->				blogListAdapter.submitList(listBlogPost)				println("Debug: viewState $listBlogPost")			}			viewState.user?.let { user ->				view?.let {					Glide.with(it.context)							.load(user.image)							.into(image)					email.text = user.email					username.text = user.userName				}				println("Debug: viewState $user")			}		})	}	override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {		super.onCreateOptionsMenu(menu, inflater)		inflater.inflate(R.menu.main_menu, menu)	}	override fun onOptionsItemSelected(item: MenuItem): Boolean {		when (item.itemId) {			R.id.action_get_user -> triggerGetUserEvent()			R.id.action_get_blogs -> triggerGetBlogPostEvent()		}		return super.onOptionsItemSelected(item)	}	private fun triggerGetBlogPostEvent() {		viewModel.setStateEvent(GetBlogPostEvent)	}	private fun triggerGetUserEvent() {		viewModel.setStateEvent(GetUserEvent("1"))	}	override fun onAttach(context: Context) {		super.onAttach(context)		try {			dataStateListener = context as DataStateListener		} catch (e: ClassCastException) {			println("Debug $context must implement data state listener")		}	}	override fun onItemSelected(position: Int, item: BlogPost) {		println("Debug: $item")	}}