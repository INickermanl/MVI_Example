package com.nikolai.mviexample.ui.mainimport android.os.Bundleimport android.view.*import androidx.fragment.app.Fragmentimport androidx.lifecycle.Observerimport androidx.lifecycle.ViewModelProviderimport com.nikolai.mviexample.Rimport com.nikolai.mviexample.ui.main.state.MainStateEvent.GetBlogPostEventimport com.nikolai.mviexample.ui.main.state.MainStateEvent.GetUserEventclass MainFragment : Fragment() {	lateinit var viewModel: MainViewModel	override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {		return inflater.inflate(R.layout.fragment_main, container, false)	}	override fun onViewCreated(view: View, savedInstanceState: Bundle?) {		super.onViewCreated(view, savedInstanceState)		viewModel = activity?.run {			ViewModelProvider(this).get(MainViewModel::class.java)		} ?: throw Exception("Invalid activity")		subscribeObservers()		setHasOptionsMenu(true)	}	private fun subscribeObservers() {		viewModel.dataState.observe(viewLifecycleOwner, Observer { dataState ->			println("Debug : DataState $dataState")			dataState.user?.let { user ->				println("Debug : DataState $user")				viewModel.setUser(user)			}			dataState.blogPost?.let { listBlogPost ->				println("Debug : DataState $listBlogPost")				viewModel.setBlogListData(listBlogPost)			}		})		viewModel.viewState.observe(viewLifecycleOwner, Observer { viewState ->			println("Debug: viewState $viewState")			viewState.blogPost?.let {				println("Debug: viewState $it")			}			viewState.user?.let {				println("Debug: viewState $it")			}		})	}	override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {		super.onCreateOptionsMenu(menu, inflater)		inflater.inflate(R.menu.main_menu, menu)	}	override fun onOptionsItemSelected(item: MenuItem): Boolean {		when (item.itemId) {			R.id.action_get_user -> triggerGetUserEvent()			R.id.action_get_blogs -> triggerGetBlogPostEvent()		}		return super.onOptionsItemSelected(item)	}	private fun triggerGetBlogPostEvent() {		viewModel.setStateEvent(GetBlogPostEvent)	}	private fun triggerGetUserEvent() {		viewModel.setStateEvent(GetUserEvent("1"))	}}