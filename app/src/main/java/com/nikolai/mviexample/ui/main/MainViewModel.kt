package com.nikolai.mviexample.ui.mainimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.Transformationsimport androidx.lifecycle.ViewModelimport com.nikolai.mviexample.model.BlogPostimport com.nikolai.mviexample.model.Userimport com.nikolai.mviexample.repository.main.MainRepositoryimport com.nikolai.mviexample.ui.main.state.MainStateEventimport com.nikolai.mviexample.ui.main.state.MainViewStateimport com.nikolai.mviexample.util.AbsentLiveDataimport com.nikolai.mviexample.util.DataStateclass MainViewModel : ViewModel() {	private val _stateEvent: MutableLiveData<MainStateEvent> = MutableLiveData()	private val _viewState: MutableLiveData<MainViewState> = MutableLiveData()	val viewState: LiveData<MainViewState>		get() {			return _viewState		}	val dataState: LiveData<DataState<MainViewState>> = Transformations			.switchMap(_stateEvent) { stateEvent ->				when (stateEvent) {					is MainStateEvent.GetBlogPostEvent -> {						MainRepository.getBlogPosts()					}					is MainStateEvent.GetUserEvent -> {						MainRepository.getUser(stateEvent.userId)					}					is MainStateEvent.None -> {						AbsentLiveData.create()					}				}				/*stateEvent?.let { handleViewState(stateEvent) }*/			}	private fun handleViewState(stateEvent: MainStateEvent): LiveData<DataState<MainViewState>> {		return when (stateEvent) {			is MainStateEvent.GetBlogPostEvent -> {				MainRepository.getBlogPosts()			}			is MainStateEvent.GetUserEvent -> {				MainRepository.getUser(stateEvent.userId)			}			is MainStateEvent.None -> {				AbsentLiveData.create()			}		}	}	fun setBlogListData(blogPost: List<BlogPost>) {		val update = getCurrentViewStateOrNew()		update.blogPost = blogPost		_viewState.value = update	}	fun setUser(user: User) {		val update = getCurrentViewStateOrNew()		update.user = user		_viewState.value = update	}	fun setStateEvent(stateEvent: MainStateEvent) {		_stateEvent.value = stateEvent	}	private fun getCurrentViewStateOrNew(): MainViewState {		return viewState.value ?: MainViewState()	}}