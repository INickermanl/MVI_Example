package com.codingwithmitch.mviexample.ui.mainimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.Transformationsimport androidx.lifecycle.ViewModelimport com.codingwithmitch.mviexample.model.BlogPostimport com.codingwithmitch.mviexample.model.Userimport com.codingwithmitch.mviexample.ui.main.state.MainStateEvantimport com.codingwithmitch.mviexample.ui.main.state.MainStateEvant.*import com.codingwithmitch.mviexample.ui.main.state.MainViewStateimport com.codingwithmitch.mviexample.util.AbsentLiveDataclass MainViewModel : ViewModel() {	private val _stateEvent: MutableLiveData<MainStateEvant> = MutableLiveData()	private val _viewState: MutableLiveData<MainViewState> = MutableLiveData()	val viewState: LiveData<MainViewState>		get() {			return _viewState		}	val dataState: LiveData<MainViewState> = Transformations			.switchMap(_stateEvent) { stateEvent ->				when (stateEvent) {					is GetBlogPostEvent -> {						return@switchMap object : LiveData<MainViewState>() {							override fun onActive() {								super.onActive()								val blogPostList = arrayListOf<BlogPost>()								blogPostList.add(										BlogPost(												id = 0,												title = "Vancouver PNE 2019",												body = "Here is Jess and I at the Vancouver PNE. We ate a lot of food.",												image = "https://cdn.open-api.xyz/open-api-static/static-blog-images/image8.jpg"										)								)								blogPostList.add(										BlogPost(												id = 1,												title = "Ready for a Walk",												body = "Here I am at the park with my dogs Kiba and Maizy. Maizy is the smaller one and Kiba is the larger one.",												image = "https://cdn.open-api.xyz/open-api-static/static-blog-images/image2.jpg"										))								value = MainViewState(										blogPost = blogPostList								)							}						}					}					is GetUserEvant -> {						return@switchMap object : LiveData<MainViewState>() {							override fun onActive() {								super.onActive()								val user = User(										email = "kolya.pluzhnik@gmail.com",										userName = "Nikolai",										image = "https://cdn.open-api.xyz/open-api-static/static-random-images/logo_1080_1080.png"								)								value = MainViewState(										user = user								)							}						}					}					is None -> {						return@switchMap AbsentLiveData.create<MainViewState>()					}				}			}	/*fun handleStateEvant(stateEvent: MainStateEvant): LiveData<MainViewState> {		return when (stateEvent) {			is GetBlogPostEvent -> AbsentLiveData.create()			is GetUserEvant -> AbsentLiveData.create()			is None -> AbsentLiveData.create()		}	}*/	fun setBlogListData(blogPost: List<BlogPost>) {		val update = getCurrentViewStateOrNew()		update.blogPost = blogPost		_viewState.value = update	}	fun setUser(user: User) {		val update = getCurrentViewStateOrNew()		update.user = user		_viewState.value = update	}	fun setStateEvent(stateEvent: MainStateEvant) {		_stateEvent.value = stateEvent	}	private fun getCurrentViewStateOrNew(): MainViewState {		return viewState.value ?: MainViewState()	}}